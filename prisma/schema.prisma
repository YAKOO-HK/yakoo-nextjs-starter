// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model FrontendUser {
  id                 String            @id @default(cuid())
  username           String            @unique(map: "username") @db.VarChar(255)
  email              String            @unique(map: "email") @db.VarChar(255)
  name               String            @db.VarChar(255)
  dob                DateTime?         @db.DateTime()
  passwordResetToken String?           @map("password_reset_token")
  passwordHash       String?           @map("password_hash") @db.Text
  enableMfa          Boolean           @default(false) @map("enable_mfa")
  status             Int               @default(0)
  createdAt          DateTime          @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime          @updatedAt @map("updated_at") @db.Timestamp(0)
  totp               FrontendUserTotp?

  @@index([passwordResetToken])
  @@map("tb_auth_user")
}

model FrontendUserTotp {
  userId    String       @id @map("user_id")
  secret    String       @map("secret")
  config    Json
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime     @updatedAt @map("updated_at") @db.Timestamp(0)
  user      FrontendUser @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("tb_auth_user_totp")
}

model AdminUser {
  id                 String                @id @default(cuid())
  username           String                @unique(map: "username")
  email              String                @unique(map: "email") @db.VarChar(255)
  name               String
  passwordResetToken String?               @map("password_reset_token")
  passwordHash       String?               @map("password_hash") @db.Text
  status             Int                   @default(0)
  createdAt          DateTime              @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt          DateTime              @updatedAt @map("updated_at") @db.Timestamp(0)
  authAssignments    AdminAuthAssignment[]

  @@index([passwordResetToken])
  @@map("tb_auth_admin_user")
}

model AdminAuthItem {
  name            String                @id
  type            Int
  description     String                @db.Text
  createdAt       DateTime              @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime              @updatedAt @map("updated_at") @db.Timestamp(0)
  children        AdminAuthItemChild[]  @relation("child")
  parents         AdminAuthItemChild[]  @relation("parent")
  authAssignments AdminAuthAssignment[]

  @@map("tb_auth_admin_auth_item")
}

model AdminAuthItemChild {
  parentName String        @map("parent")
  childName  String        @map("child")
  parentItem AdminAuthItem @relation(fields: [parentName], references: [name], onDelete: Cascade, onUpdate: Cascade, name: "parent")
  childItem  AdminAuthItem @relation(fields: [childName], references: [name], onDelete: Cascade, onUpdate: Cascade, name: "child")

  @@id([parentName, childName])
  @@map("tb_auth_admin_auth_item_child")
}

model AdminAuthAssignment {
  userId    String        @map("user_id")
  itemName  String        @map("auth_item")
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime      @updatedAt @map("updated_at") @db.Timestamp(0)
  user      AdminUser     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authItem  AdminAuthItem @relation(fields: [itemName], references: [name], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, itemName])
  @@map("tb_auth_admin_auth_assignment")
}
